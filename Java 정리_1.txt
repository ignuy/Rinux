[클래스란?] 
객체(실제로 존재하는것,사물 또는 개념)를 정의하는 틀 또는 설계도
객체의 상태 와 행동(필드 와 메소드)로 구성
필드 : 클래스에 포함된 변수
메소드 : 명령문의 집합

-Object 클래스 : 모든 클래스들의 최고조상(Object 클래스의 멤버들은 모든 클래스에서 바로사용가능)

[메소드란?]
어떠한 특정 작업을 수행하기 위한 명령문의 집합
기본적으로 수학의 함수와 유사 단, 입력값 과 출력값 이 모두없을수도 있고 둘중 하나만 없을수 있다.

-사용이유?
1.높은 재사용성 - 몇번이고 호출가능, 다른프로그램에서도 사용가능
2.중복된 코드의 제거 - 반복되는 문장들을 묶어서 하나의 메서드로 사용
3.프로그램의 구조화 - 큰 규모의 프로그램에서 여러개의 메소드를 만들어 단순하게 구조화 가능

[패키지란?]
클래스들의 묶음(관련 클래스끼리 묶어서 클래스를 효율적으로 관리가능)

-사용이유?
다른 개발자가 개발한 클래스와 이름이 충돌하는것을 방지

[접근제한자]
1.public      : 접근제한이 전혀 없다
2.private     : 같은 클래스 내에서만 접근이 가능
3.protected : 같은 패키지 내에서, 다른 패키지의 자손클래스에 접근 가능
4.(default)   : 같은 패키지 내에서만 접근 가능

[Static]
의미 : '클래스의' 또는 '공통적인'
인스턴스변수는 하나의 클래스로부터 생성되었다가 각기 다른 값을 유지하지만, 
클래스변수(Static멤버변수)는 인스턴스에 관계없이 같은 값을 가진다.

-이유? 하나의 변수를 모든 인스턴스가 공유하기 때문

사용가능한곳 : 멤버변수,메서드,초기화블럭


[객체화 또는 인스턴스화]
클래스를 선언한것은 그 클래스의 설계도를 작성한 것에 불과, 클래스 인스턴스를 생성(제품생성)해야
클래스를 사용할수 있다.

클래스명 변수명; 		//클래스의 객체를 참조하기 위한 참조변수를 선언
변수명 = new 클래스명();     //클래스의 객체를 생성 후, 객체릐 주소를 참조변수에 저장

연산자 new에 의해 클래스의 인스턴스가 메모리의 빈 공간에 생성

클래스(설계도)를 참조하여 객체(제품)을 만드는 과정을 말함
....

